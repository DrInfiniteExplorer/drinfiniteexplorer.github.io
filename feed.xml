<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="blog.luben.se/feed.xml" rel="self" type="application/atom+xml" /><link href="blog.luben.se/" rel="alternate" type="text/html" /><updated>2020-11-21T17:54:37+01:00</updated><id>blog.luben.se/feed.xml</id><title type="html">Siffer</title><subtitle>Blogging is for nerds!</subtitle><entry><title type="html">Bed level script</title><link href="blog.luben.se/2020/11/21/bed-level-script.html" rel="alternate" type="text/html" title="Bed level script" /><published>2020-11-21T17:00:00+01:00</published><updated>2020-11-21T17:00:00+01:00</updated><id>blog.luben.se/2020/11/21/bed-level-script</id><content type="html" xml:base="blog.luben.se/2020/11/21/bed-level-script.html">&lt;p&gt;I’ve written a tool to adjust bed-level-data easier.&lt;/p&gt;

&lt;p&gt;In my previous post I wrote about building Marling FW with bed leveling. Since then I’ve done a lot of test-prints, and realized that it is kinda hard to do properly.&lt;/p&gt;

&lt;p&gt;So I wrote a simple tool to adjust and iterate on the mesh easier. It is available on github in the &lt;a href=&quot;https://github.com/DrInfiniteExplorer/adjust_bed&quot;&gt;Level_Adjust&lt;/a&gt;-repository.&lt;/p&gt;</content><author><name></name></author><category term="3dp" /><category term="ender5" /><summary type="html">I’ve written a tool to adjust bed-level-data easier.</summary></entry><entry><title type="html">Building &amp;amp; flashing Ender5 Pro firmware</title><link href="blog.luben.se/2020/11/07/ender5-pro-firmware.html" rel="alternate" type="text/html" title="Building &amp; flashing Ender5 Pro firmware" /><published>2020-11-07T16:30:00+01:00</published><updated>2020-11-07T16:30:00+01:00</updated><id>blog.luben.se/2020/11/07/ender5-pro-firmware</id><content type="html" xml:base="blog.luben.se/2020/11/07/ender5-pro-firmware.html">&lt;p&gt;So I went and bought and Ender5 Pro to learn how to 3d-print stuff.&lt;/p&gt;

&lt;p&gt;Unfortunately my bed (the thing you print on) is &lt;em&gt;warped&lt;/em&gt;, which leads to bad print results.
The printer expects the bed to be without curvature and to have an even distance to the extruder.
For me and many other owners of Ender5 (Pro), the stock bed has slightly raised edges (or a lower center).&lt;/p&gt;

&lt;p&gt;Most videos and guides for how to deal with this on the internet just says to perform &lt;a href=&quot;https://all3dp.com/2/mesh-bed-leveling-all-you-need-to-know/&quot;&gt;Mesh bed leveling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately the stock firmware is old and does not contain this feature, so we need to build our own.
The stock firmware version for me was &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;1.1.6.3&lt;/code&gt;, but I’m building version &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;2.0.7.2&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The stock firmware is called &lt;a href=&quot;https://github.com/MarlinFirmware/Marlin&quot;&gt;Marlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The control board we flash is called &lt;a href=&quot;https://reprap.org/wiki/Melzi&quot;&gt;Melzi&lt;/a&gt;. The actual board seems to be a Creality-specific version as it looks different from what is on that wiki. (mine is version 1.1.5, which is printed on the PCB)&lt;/li&gt;
  &lt;li&gt;I’m using &lt;a href=&quot;https://marlinfw.org/docs/basics/install_platformio_cli.html&quot;&gt;PlatformIO&lt;/a&gt; to build the FW&lt;/li&gt;
  &lt;li&gt;Using an &lt;a href=&quot;https://octoprint.org/&quot;&gt;OctoPi&lt;/a&gt; with the &lt;a href=&quot;https://plugins.octoprint.org/plugins/firmwareupdater/&quot;&gt;Firmware updater&lt;/a&gt; plugin
    &lt;ul&gt;
      &lt;li&gt;This also requires you to install &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;avrdude&lt;/code&gt; with &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;avrdude&lt;/code&gt; (on the octopi)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I downloaded the 2.0.x sources from &lt;a href=&quot;https://marlinfw.org/docs/basics/install.html&quot;&gt;this site&lt;/a&gt; and decided to do a command-line build with &lt;a href=&quot;https://marlinfw.org/docs/basics/install_platformio_cli.html&quot;&gt;PlatformIO&lt;/a&gt; instead of the more common vscode/arduino-studio-alternatives.
First I started with arduino studio through &lt;a href=&quot;https://github.com/tombenke/darduino&quot;&gt;Darduino&lt;/a&gt; but clicking interfaces blindly is not my style, so I adapted the dockerfile and shell-script for &lt;a href=&quot;https://marlinfw.org/docs/basics/install_platformio_cli.html&quot;&gt;PlatformIO&lt;/a&gt; instead. You can find my modified files at the end of this post.&lt;/p&gt;

&lt;p&gt;When the docker is built and running, we need to configure the firmware for the board.
Download a pair of “standard” &lt;a href=&quot;https://github.com/MarlinFirmware/Configurations/tree/import-2.0.x/config/examples/Creality/Ender-5%20Pro/CrealityV1&quot;&gt;Ender5 Pro config files&lt;/a&gt; from github and put into the &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Marlin&lt;/code&gt; directory (overwrite/replace the existing &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Configuration.h&lt;/code&gt; and &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Configuration_adv.h&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then browse to the Marlin root directory (which contains &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt;) and run &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;platformio run &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; melzi_optimized&lt;/code&gt; to build the firmware.
The resulting hex-file can be found in &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;./.pio/build/melzi_optimized/firmware.hex&lt;/code&gt; and is needed for OctoPi.&lt;/p&gt;

&lt;p&gt;The OctoPi-plugin needs to be configured with the right programmer and CPU.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/3dp/octopi/fw-plugin-config.gif&quot; alt=&quot;FW-plugin-config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then you just select the hex-file and flash. Wooh!&lt;/p&gt;

&lt;p&gt;Before I started hacking with mesh bed leveling configuration, I made sure to verify that this flashed and ran properly.&lt;/p&gt;

&lt;p&gt;Then we &lt;em&gt;just&lt;/em&gt; have to configure the firmware for our usecase.
&lt;a href=&quot;https://marlinfw.org/docs/gcode/G029.html&quot;&gt;G29 - Bed Leveling documentation&lt;/a&gt; goes into details about different schemes, how to configure them, and how to use them.&lt;/p&gt;

&lt;p&gt;I’ve decided to go for manual bed leveling, with 5x5 measurement points, and LCD menu to help out measurements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#define MESH_BED_LEVELING&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#define RESTORE_LEVELING_AFTER_G28&lt;/span&gt;&lt;/code&gt; to not loose config after auto-home&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#define GRID_MAX_POINTS_X 5&lt;/span&gt;&lt;/code&gt; inside the proper ifdef&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#define LCD_BED_LEVELING&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But unfortunately this makes the firmware to large. We need to remove some features to make it small enough for our needs.&lt;/p&gt;

&lt;p&gt;Teaching Tech details some thins to turn off in this video about &lt;a href=&quot;https://youtu.be/sUlqrSq6LeY?t=526&quot;&gt;BLTouch in Ender3&lt;/a&gt;.
Great videos, but I want data easily accessible so I’m listing what can be configured here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#define SPEAKER&lt;/span&gt;&lt;/code&gt; - Not removed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#define SHOW_BOOTSCREEN&lt;/span&gt;&lt;/code&gt; - Removed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#define ARC_SUPPORT&lt;/span&gt;&lt;/code&gt; in &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Condifuration_adv.h&lt;/code&gt; - Not removed, non-linear movements are cool AF&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#define DISABLE_M503&lt;/span&gt;&lt;/code&gt; - Already removed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#define EEPROM_CHITCHAT&lt;/span&gt;&lt;/code&gt; - Not removed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#define SLIM_LCD_MENUS&lt;/span&gt;&lt;/code&gt; - Enabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After having flashed this I preheated for PLA(Cause temperature and size) and performed “manual” leveling of the bed, in an attempt to orient the bed before doing mesh leveling.&lt;/p&gt;

&lt;p&gt;Then I did a leveling using the LCD and boy is the bed not level!&lt;/p&gt;

&lt;p&gt;After storing the settings I ran &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;G29 S0&lt;/code&gt; via OctoPi to get a printout of the measured bed values.
This will enable me to quickly restore them, should I need to wipe EEPROM sometime.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Send: G29 S0
Recv: Mesh Bed Leveling OFF
Recv: 5x5 mesh. Z offset: 0.00000
Recv: Measured points:
Recv:         0        1        2        3        4
Recv:  0 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.07500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.12500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.12500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.12500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.02500
Recv:  1 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.07500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.12500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.12500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.12500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.02500
Recv:  2 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.07500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.12500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.15000 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.12500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.00000
Recv:  3 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.05000 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.15000 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.17500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.15000 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.02500
Recv:  4 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.05000 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.17500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.22500 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.20000 &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;.05000
Recv: 
Recv: X:220.00 Y:220.00 Z:0.00 E:0.00 Count X:17600 Y:17600 Z:0
Recv: ok
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ayy lmao no wonder my initial prints didn’t look too good.&lt;/p&gt;

&lt;details&gt;
&lt;summary&gt;
Dockerfile
&lt;/summary&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ubuntu:16.04&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; HOME /home/developer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/developer&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Replace 1000 with your user / group id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000 &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000 &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /home/developer &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/sudoers.d &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;developer&amp;lt;img class='emoji' title='x' alt='x' src='https://github.githubassets.com/images/icons/emoji/x.png' height='32' width='32' align='absmiddle' &amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:Developer,,,:/home/developer:/bin/bash&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/passwd &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;developer&amp;lt;img class='emoji' title='x' alt='x' src='https://github.githubassets.com/images/icons/emoji/x.png' height='32' width='32' align='absmiddle' &amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/group &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;developer ALL=(ALL) NOPASSWD: ALL&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/sudoers.d/developer &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;0440 /etc/sudoers.d/developer &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; /home/developer &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    apt-get update &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        software-properties-common 

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; python3-pip python3-tk
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; platformio

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; LC_ALL C.UTF-8&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; LANG C.UTF-8&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; DISPLAY :1.0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; developer&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;br&gt;


&lt;details&gt;
&lt;summary&gt;
platformio.sh
&lt;/summary&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; yolo:yeet &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DISPLAY&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /tmp/.X11-unix:/tmp/.X11-unix &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /dev:/dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/topics:/topics &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/topics/platformio:/home/developer/platformio &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; platformio &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    yolo:yeet
    
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;br&gt;

&lt;p&gt;Other sources:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=aQIg9zxuCvM&quot;&gt;Teaching Techs guide&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="3dp" /><category term="ender5" /><category term="fw" /><category term="octoprint" /><summary type="html">So I went and bought and Ender5 Pro to learn how to 3d-print stuff.</summary></entry><entry><title type="html">Windows Container notes</title><link href="blog.luben.se/2020/05/11/windows-containers.html" rel="alternate" type="text/html" title="Windows Container notes" /><published>2020-05-11T01:50:00+02:00</published><updated>2020-05-11T01:50:00+02:00</updated><id>blog.luben.se/2020/05/11/windows-containers</id><content type="html" xml:base="blog.luben.se/2020/05/11/windows-containers.html">&lt;p&gt;Today was the day during which I was going to get going with &lt;a href=&quot;https://github.com/ghdl/ghdl-yosys-plugin&quot;&gt;ghdl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or so I thought.&lt;/p&gt;

&lt;p&gt;Initially I was reading up on the updates, and was going to start by running a simple example in their docker.&lt;/p&gt;

&lt;p&gt;I haven’t dealt much with docker so far; I know the concept(s) and that has been enough.&lt;/p&gt;

&lt;p&gt;So I thought I’d read up a little on what the normal workflows are, etc.
But I got sidetracked by vaugely worded comments on the docker page about the difference between Linux and Windows docker images.&lt;/p&gt;

&lt;p&gt;I’ve heard &lt;em&gt;a lot&lt;/em&gt; of people say that &lt;em&gt;Windows-based docker-images is impossible!&lt;/em&gt; but what do I find, it’s been supported for 4 years already.&lt;/p&gt;

&lt;p&gt;Linux images can be hosted with process-isolation in a Linux-VM, or be hosted more separated where each image gets its own small VM.&lt;/p&gt;

&lt;p&gt;But what about windows images?&lt;/p&gt;

&lt;p&gt;Apparently they are built on top of Microsoft-provided base-images which contain container-adapted DLLs(?).
 By default images built on those just soft-link to the base image, but this can be overridden as mentioned in the &lt;a href=&quot;https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/faq&quot;&gt;Windows Container FAQ&lt;/a&gt; on MSDN.&lt;/p&gt;

&lt;p&gt;After an hour of fruitless digging on Docker and various Microsoft-sites I found this &lt;a href=&quot;https://unit42.paloaltonetworks.com/what-i-learned-from-reverse-engineering-windows-containers/&quot;&gt;reverse-engineering post&lt;/a&gt; site where some bloke summarized
 that virtualization works with &lt;em&gt;Jobs&lt;/em&gt; and &lt;em&gt;Silos&lt;/em&gt;. A Job loosely corresponds to the Linux mechanism &lt;em&gt;control group&lt;/em&gt; (cgroup).
The namespacing mechanism in Linux is loosely the same as a &lt;em&gt;silo&lt;/em&gt; which can change the root namespace object in windows,
 through which filesystem, registry, and other things is accessed.&lt;/p&gt;

&lt;p&gt;With these new search terms in hand I found book about &lt;a href=&quot;https://books.google.se/books?id=y83LDgAAQBAJ&amp;amp;lpg=PT299&amp;amp;ots=kHeyLyLsgE&amp;amp;dq=create%20silo%20application%20win32&amp;amp;pg=PT310#v=onepage&amp;amp;q=create%20silo%20application%20win32&amp;amp;f=false&quot;&gt;Windows Internals&lt;/a&gt; with details about how to create and operate jobs and silos.&lt;/p&gt;

&lt;p&gt;It is likely that &lt;a href=&quot;https://docs.microsoft.com/en-us//windows/msix/overview?view=winrt-18362&quot;&gt;MSIX&lt;/a&gt; (which I stumbled over when looking for container APIs) uses these mechanisms to achieve their containerized structure.
MSIX replaces the old &lt;a href=&quot;https://www.tmurgent.com/TmBlog/?p=2489&quot;&gt;AppV&lt;/a&gt; which did virtualization by filter drivers and similar redirection.&lt;/p&gt;</content><author><name></name></author><category term="notes" /><summary type="html">Today was the day during which I was going to get going with ghdl.</summary></entry><entry><title type="html">Markdown in &amp;lt;details&amp;gt;</title><link href="blog.luben.se/2020/03/22/jekyll-kramdown-in-details.html" rel="alternate" type="text/html" title="Markdown in &amp;lt;details&amp;gt;" /><published>2020-03-22T03:10:00+01:00</published><updated>2020-03-22T03:10:00+01:00</updated><id>blog.luben.se/2020/03/22/jekyll-kramdown-in-details</id><content type="html" xml:base="blog.luben.se/2020/03/22/jekyll-kramdown-in-details.html">&lt;p&gt;Today I’ve polished the blog a bit and found out some stuff.&lt;/p&gt;

&lt;p&gt;I learned about the HTML5 &lt;a href=&quot;https://www.w3schools.com/tags/tag_details.asp&quot;&gt;&amp;lt;details&amp;gt; tag&lt;/a&gt; when I searched for a simple way to make collapsible code
 (which is great for illustrative purposes, but can get in the way of the main point you want to convey).&lt;/p&gt;

&lt;p&gt;But I ran into some problems; The markdown inside the &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;&amp;lt;details&amp;gt;&lt;/code&gt; tag didn’t render.&lt;/p&gt;

&lt;p&gt;Some people suggested to add&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kramdown&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kramdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;parse_block_html&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to the &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file &lt;strong&gt;but this was &lt;em&gt;bad&lt;/em&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;This is to apply a &lt;a href=&quot;https://devblogs.microsoft.com/oldnewthing/20081211-00/?p=19873&quot;&gt;global solution to a local problem&lt;/a&gt;, which is never the solution you want to try first.&lt;/p&gt;

&lt;p&gt;I did try it, and it still made a big mess of things!&lt;/p&gt;

&lt;p&gt;A little extra digging and I found out that you can do&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-none&quot;&gt;{::nomarkdown}
&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;This is an example&amp;lt;/summary&amp;gt;
{:/nomarkdown}

```python
print(&quot;example yo&quot;)
```

{::nomarkdown}
&amp;lt;/details&amp;gt;
&amp;lt;br&amp;gt;
{:/nomarkdown}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which just disables the markdown processor enough to let me add the raw html needed.&lt;/p&gt;

&lt;p&gt;And hey, here is that exact demo!&lt;/p&gt;

&lt;details&gt;
&lt;summary&gt;This is an example&lt;/summary&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example yo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;br&gt;

&lt;p&gt;Pretty neat.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="jekyll" /><summary type="html">Today I’ve polished the blog a bit and found out some stuff.</summary></entry><entry><title type="html">HDL synthezis notes</title><link href="blog.luben.se/2020/03/21/hdl-synthesis-notes.html" rel="alternate" type="text/html" title="HDL synthezis notes" /><published>2020-03-21T16:30:00+01:00</published><updated>2020-03-21T16:30:00+01:00</updated><id>blog.luben.se/2020/03/21/hdl-synthesis-notes</id><content type="html" xml:base="blog.luben.se/2020/03/21/hdl-synthesis-notes.html">&lt;p&gt;Many years ago, I thought that circuit diagrams was the only way to reason about electronics and logic.&lt;/p&gt;

&lt;p&gt;In fact I only lived in the analog world at the time, with transistors and resistors.&lt;/p&gt;

&lt;p&gt;Then I started studying at &lt;a href=&quot;https://www.lith.liu.se/?l=en&quot;&gt;LiTH&lt;/a&gt; and learned more about analog electronics, and really got introduced to digital electronics.
That shit was rad! Just connect pins of standard circuits to create advanced shit like counters and serial buffers and things that is straight up overwhelming to design as analog circuits!&lt;/p&gt;

&lt;p&gt;Then the courses slowly transitioned into how to compose more even advanced functionality, and finally into composing those functions into simple CPU architectures!&lt;/p&gt;

&lt;p&gt;At this point we still drew schematics for things and used this as the perspective to reason around.
Then we got introduced to &lt;a href=&quot;https://en.wikipedia.org/wiki/VHDL&quot;&gt;VHDL&lt;/a&gt; and things started taking off for real!
Within a few weeks we had to design and implement functioning CPU architectures on &lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_programmable_logic_device&quot;&gt;CPLD&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;It wasn’t a game-changer at the time.
But now it seems like the simplest thing to project the idea of what you want into &lt;a href=&quot;https://en.wikipedia.org/wiki/VHDL&quot;&gt;VHDL&lt;/a&gt;.
Schematics and diagrams are still of help of course, but any single subcircuit is easy to express.&lt;/p&gt;

&lt;h2 id=&quot;for-the-uninitiated&quot;&gt;For the uninitiated&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/VHDL&quot;&gt;VHDL&lt;/a&gt; is one of two major &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_description_language&quot;&gt;HDL&lt;/a&gt; (Hardware Description Language) available, the other being &lt;a href=&quot;https://en.wikipedia.org/wiki/Verilog&quot;&gt;Verilog&lt;/a&gt;.
Verilog is similar in syntax to C, while &lt;a href=&quot;https://en.wikipedia.org/wiki/VHDL&quot;&gt;VHDL&lt;/a&gt; is similar in syntax to &lt;a href=&quot;https://en.wikipedia.org/wiki/Ada_(programming_language)&quot;&gt;Ada&lt;/a&gt;.
I personally prefer the explicit and verbose syntax of &lt;a href=&quot;https://en.wikipedia.org/wiki/VHDL&quot;&gt;VHDL&lt;/a&gt;.
Verilog to me looks like someone made an ugly hack and everybody just rolled with it.&lt;/p&gt;

&lt;p&gt;Anyway, what the languages boil down to is to be able to say that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We are designing a chip! (Called &lt;em&gt;Magic&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;It has inputs &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;i1&lt;/code&gt;, &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;i2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;It has outputs &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;o1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Internall in our chips, we have two other chips A and B.&lt;/li&gt;
  &lt;li&gt;A is a two-input AND-gate. Inputs &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Ai1&lt;/code&gt;, &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Ai2&lt;/code&gt;. Output &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Ao1&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;B is a NOT-gate. Input &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Bi1&lt;/code&gt;. Output &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Bi2&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Connect &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;i1&lt;/code&gt; to &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Ai1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Connect &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;i2&lt;/code&gt; to &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Ai2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Connect &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Ao1&lt;/code&gt; to &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Bi1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Connect &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;Bo1&lt;/code&gt; to &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;o1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s what it is in simple terms.&lt;/p&gt;

&lt;details&gt;

&lt;summary&gt;
Click here to view the corresponding VHDL
&lt;/summary&gt;

&lt;div class=&quot;language-vhdl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;-- this is the entity&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Magic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Magic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- this is the architecture&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;architecture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Magic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;AND&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ai1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;Ai2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;Ao1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;NOT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bi1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;Bo1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- Here we say that we have a signal called `wire1`.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wire1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;-- Create an AND-gate called A, and connect input from Magic to it.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- Output is into the signal `wire`&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ai1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ai2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ao1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wire1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- Create NOT-circuit called B.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- Input is the signal `wire` which is connected to the output of A&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- Output is connected to the output of Magic&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bi1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bo1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;architecture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;br&gt;

&lt;p&gt;Now, as basic logic like AND, OR, NOT, etc is very common building blocks, we there is language support for being able to express that without expicitly declaring all internal” chips and connections they require. A functional equivalent would be&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We are designing a chip!&lt;/li&gt;
  &lt;li&gt;It has inputs &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;i1&lt;/code&gt;, &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;i2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;It has outputs &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;o1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Connect &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;NOT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AND&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i1, i2&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt; to &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;o1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a lot easier and a lot more concise to express than the earlier version, and thus easier to work with.&lt;/p&gt;

&lt;details&gt;

&lt;summary&gt;
Click here to view the corresponding VHDL
&lt;/summary&gt;

&lt;div class=&quot;language-vhdl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;-- this is the entity&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Magic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Magic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;architecture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Magic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- This is a lot more compact and concise. You could even do `o1 &amp;lt;= i1 nand i2;` directly!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;architecture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;br&gt;

&lt;p&gt;These are both two versions of what is called a &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Netlist&quot;&gt;netlist&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A netlist is a.. list, that describes the interconnectivity network of circuits.&lt;/p&gt;

&lt;p&gt;The process of synthesizing &lt;a href=&quot;https://en.wikipedia.org/wiki/VHDL&quot;&gt;VHDL&lt;/a&gt;(or any &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_description_language&quot;&gt;HDL&lt;/a&gt;) is the process of refining the netlists into less concise versions of themselves.
After the netlist has been detailed all the way to only consist of individual AND, OR, NOT cells, it is said to be a &lt;em&gt;logic-level netlist&lt;/em&gt;.
Of course, depending on the target of the synthetization there might be higher-level gates available for common functions, like adders or memories.&lt;/p&gt;

&lt;p&gt;We perform further synthetization from &lt;em&gt;logic-level&lt;/em&gt; to &lt;em&gt;gate-level&lt;/em&gt;, and during this we might map some logic to the existing adder-circuits available.&lt;/p&gt;

&lt;p&gt;Regardless of the level where it is done, the term is &lt;em&gt;technology mapping&lt;/em&gt; when mapping a netlist to existing building blocks.
Technically mapping basic logic like AND is also &lt;em&gt;technology mapping&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Logic networks can be transformed into multiple equivalent circuits.
Sometimes an &lt;em&gt;And-Inverter Graph&lt;/em&gt; is a good representation, where optimizations can be performed.
But it could as well be that the logic is turned into a &lt;em&gt;Loop-Up Table&lt;/em&gt; (LUT), which can be realized with MUXes or ROM.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s, technology mapping is often to rewrite logic circuits into fixed-sized LUTs.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_programmable_logic_device&quot;&gt;CPLD&lt;/a&gt;s, it could be to turn logic into ORs of ANDs (&lt;a href=&quot;https://en.wikipedia.org/wiki/Disjunctive_normal_form&quot;&gt;sum of products&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;After a gate-level netlist has been produced, it is &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Place_and_route&quot;&gt;placed and routed&lt;/a&gt;&lt;/em&gt;.
This corresponds to giving physical locations to the cells(placing) and making sure the right inputs/outputs can be connected (routing).
This is kind of like solving a sudoku-puzzle; position the numbers(place) and make sure the constraints are fullfilled (routing is possible).
Like in sudoku, something that is badly placed prevents you from solving the entire puzzle. If that happens, you try again until you make it.&lt;/p&gt;

&lt;p&gt;Now there are a few common ways to synthezise to hardware&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Map to &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; / &lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_programmable_logic_device&quot;&gt;CPLD&lt;/a&gt;. There are known grids where a unit can perform simple logic, usually with a D-style flipflop at the end, and a connectivity grid that can be configured to connect units to each other. The hardware is reconfigurable multiple times and easily aquired at a low cost.&lt;/li&gt;
  &lt;li&gt;Map to a &lt;em&gt;Standard Cell&lt;/em&gt; architecture. Like and &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; there are units with simple logic available, but there is larger flexibility in interconnect and special functions. This is done if you want a physical chip built with your logic that you can sell / build bigger systems with. This is a rather expensive process, and once the chip has been manufactured it is impossible to change or update. But it is absolutely cheap in large numbers, and doesn’t require bootstrapping.&lt;/li&gt;
  &lt;li&gt;Map all the way to individual analog/digital electronic blocks. This is pretty hardcore, but offers some potential that is lost when you constrain yourself to be able to fit into a pre-designed grid. For example, for some circuits you might be able to drastically decrease the chip-area needed to implement a function.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="hdl-synthezis" /><category term="vhdl" /><summary type="html">Many years ago, I thought that circuit diagrams was the only way to reason about electronics and logic.</summary></entry><entry><title type="html">Github pages</title><link href="blog.luben.se/2020/03/20/rant-about-github-pages.html" rel="alternate" type="text/html" title="Github pages" /><published>2020-03-20T23:15:01+01:00</published><updated>2020-03-20T23:15:01+01:00</updated><id>blog.luben.se/2020/03/20/rant-about-github-pages</id><content type="html" xml:base="blog.luben.se/2020/03/20/rant-about-github-pages.html">&lt;p&gt;Ok, so &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; are cool. But unfortunately not as straightforward to get going as one might like.&lt;/p&gt;

&lt;p&gt;At least not when you just want to host some files and let github do the &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&quot;&gt;Jekyll&lt;/a&gt;-lifting for you.
Preferably you’d just clone/fork an existing repository and BAM you’d have everything set up, ready to edit.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;noooooo&lt;/em&gt;, you need to install a lot of crap locally just in order to run a &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;jekyll init&lt;/code&gt; command to generate some boilerplate files.
And the instructions for doing that is spread out all over the place. You need to collect them and figure out the missing crap,
 because god help you if you happen to get the wrong version of a dependency installed!&lt;/p&gt;

&lt;p&gt;For the convenience of myself and others, I’m writing this blog post and linking a version of my own crap that is ready to be cloned.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/DrInfiniteExplorer/drinfiniteexplorer.github.io/tree/7b9d50b3f4fc6f51042776edb96079e3985e1715&quot;&gt;This&lt;/a&gt; is my repo and the specific git commit you’d want to start from.
Easiest is probably to just &lt;a href=&quot;https://github.com/DrInfiniteExplorer/drinfiniteexplorer.github.io/archive/7b9d50b3f4fc6f51042776edb96079e3985e1715.zip&quot;&gt;download a copy&lt;/a&gt; of the files and put into your own repo.&lt;/p&gt;

&lt;p&gt;If you want to run Jekyll locally you still need to install crap.
These are the instructions I compiled through some experimentation.
I’m running Ubuntu-18.04&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Install things we need&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby-full make gcc build-essential zlib1g-dev

&lt;span class=&quot;c&quot;&gt;# Add configuration of where to store ruby gems into .bashrc&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  Probably better to make a local environment for just the Jekyll instance tho.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'# Install Ruby Gems to ~/gems'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export GEM_HOME=&quot;$HOME/gems&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;$HOME/gems/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc

&lt;span class=&quot;c&quot;&gt;# Install bundler tool&lt;/span&gt;
gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler

&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;blog
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;blog

&lt;span class=&quot;c&quot;&gt;# This is an important first step as otherwise you might end up with crappy version problems&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;source 'https://rubygems.org'&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gem 'github-pages'&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Gemfile
bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# --force to overwrite the existing Gemfile&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll new &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Open the `Gemfile`, comment out `gem &quot;Jekyll&quot;` and comment in `gem &quot;github-pages&quot;` as is instructed in the gemfile.&lt;/span&gt;
bundle update

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There you have it, that’s a lot to do to create a handful of boring files.&lt;/p&gt;

&lt;h1 id=&quot;edit-2020-03-21&quot;&gt;Edit 2020-03-21&lt;/h1&gt;

&lt;p&gt;I have since yesterday abandoned letting github build the site.
It is now built with jekyll by myself. Github is just the host.
My main reason for doing it so quickly is because apparently the &lt;code class=&quot;language-bash highlighter-rouge&quot;&gt;github-pages&lt;/code&gt;-gem disables the plugin-functionality of Jekyll.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="github-pages" /><summary type="html">Ok, so Github Pages are cool. But unfortunately not as straightforward to get going as one might like.</summary></entry></feed>